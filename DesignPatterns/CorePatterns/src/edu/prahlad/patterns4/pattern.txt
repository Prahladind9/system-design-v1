Why do we need patterns?
The blunt answer is we don't want to reinvent the wheel!

Telescope Pattern is called an anti-pattern: how NOT to do things!

Example:
Aircraft(String type)
Aircraft(String type, String color)
Aircraft(String type, String color, String prop3)
Aircraft(String type, String color, String prop3, String prop4)

Suggestions for Object-Oriented Design
    1) Separate out parts of code that vary or change from those that remain the same.
    2) Always code to an interface and not against a concrete implementation.
    3) Encapsulate behaviours as much as possible.
    4) Favor composition over inheritance.
       Inheritance can result in explosion of classes and also sometimes
       the base case is fitted with new functionality that isn't applicable to some of its derived classes.
    5) Interacting components within a system should be as loosely coupled as possible.
    6) Ideally, class design should inhibit(restrict) modification and encourage extension.
    7) Using patterns in your day-to-day work, allows exchanging entire implementation concepts
       with other developers via shared pattern vocabulary.

    One point to remember, that making one's design flexible and extensible
    correspondingly increases the complexity and understandability of the code base.
    One must walk a fine line between the two competing objectives when designing and writing software.

Types of Design Patterns
Creational, Structural, Behavioural

"Creational" design patterns relate to how objects are constructed from classes.
New-ing up objects may sound trivial but unthoughtful littering code with object instance creations can lead to headaches down the road.
The creational design pattern come with powerful suggestions on how best to encapsulate the objection creation process in a program.
    1) Builder Pattern
    2) Prototype Pattern
    3) Singleton Pattern
    4) Abstract Factory Pattern

"Structural" patterns are concerned with the composition of classes i.e.
how the classes are made up or constructed.
    1) Adapter Pattern
    2) Bridge Pattern
    3) Composite Pattern
    4) Decorator Pattern
    5) Facade Pattern
    6) Flyweight Pattern
    7) Proxy Pattern

"Behavioral" patterns dictate the interaction of classes and objects amongst each other and
the delegation of responsibility
    1) Interpreter Pattern
    2) Template Pattern
    3) Chain of Responsibility Pattern
    4) Command Pattern
    5) Iterator Pattern
    6) Mediator Pattern
    7) Memento Pattern
    8) Observer Pattern
    9) State Pattern
   10) Strategy Pattern
   11) Visitor Pattern